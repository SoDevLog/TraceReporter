/*--------------------------------------------------------------------------*\
 * Copyright (c) 1998-2000 AbyreSoft. Written by Bruno Raby.
 *--------------------------------------------------------------------------*
 * TTrace.c - Differentes facons de faire des traces
\*--------------------------------------------------------------------------*/

/*
 * Utiliser les Threads et valider les états de la communication
 */

#include "cMenu.h"
#include "pmInterface.h"
#include "pmEnv.h"
#include "pmTrace.h"

#include "cltypes.h"
#include "clstructs.h"
#include "clreaders.h"
#include "cl_readers.h"
#include "csl.h"

#include "csl_component.h"
#include "..\CSLLib\porting\win32\clsupport_win32.h"

/*--------------------------------------------------------------------------*/

static bool IsClosed = false; // indicate CSL have been closed by user

/*--------------------------------------------------------------------------*/

extern char FullExeFileNameWithDirectory[1024];

/*--------------------------------------------------------------------------*\
 * GLOBAL VARIABLES
\*--------------------------------------------------------------------------*/

static char 		g_friendlyName[64] = "03 0E 0D 67"; // only deal with one reader
static t_Reader 	g_Reader;

/*---------------------------------------------------------------------------*/

static void DoInitGlobalContext(void)
{
    e_Result status = CL_ERROR;

    pm_trace0("DoInitGlobalContext: BEGIN");
    cl_GetElapsedTimeHighPerformanceWin32();

    //------------------------------
    // Settings of User's functions
    //------------------------------

    g_tHalFunc.fnTrace = ( void *)pm_trace1; // ( void *): to avoid warning message

    g_tHalFunc.fnAllocMem = csl_AllocDebug;
    g_tHalFunc.fnFreeMem = csl_FreeDebug;

    //-----------------------------

    status = csl_InitGlobalContext
	(
		(e_StackSupport)( COM_STACK_SUPPORT ),
		(t_clSys_HalFunctions *)&g_tHalFunc,
		(t_clSys_CallBackFunctions *)&g_tCallbacks,
		(t_clSys_CallBackFunctions *)CL_NULL,
		&g_tCSLDefaultReader,
		&g_IPReaderDefaultHAL,
		CL_NULL,
		&g_COMReaderDefaultHAL,
		CL_NULL,
		CL_NULL,
		CL_NULL,
		(t_MenuFileDef *)&g_tMenuFileDef,
		FullExeFileNameWithDirectory
	);
    if ( CL_SUCCESS( status ) )
	{
		pm_trace0( "csl_InitGlobalContext: SUCCESS" );
	}
	else
	{
		pm_trace0( "csl_InitGlobalContext: FAILED" );
	}

    status = cl_InitReadersFromFile();
	if ( CL_SUCCESS( status ) )
	{
		pm_trace0("cl_InitReadersFromFile: SUCCESS");
	}
	else
	{
		pm_trace0("cl_InitReadersFromFile: FAILED");
	}

	status = cl_InitReaderFromFileByFriendlyName(g_friendlyName, &g_Reader);
	if ( CL_SUCCESS( status ) )
	{
		pm_trace0("cl_InitReaderFromFileByFriendlyName: SUCCESS");
	}
	else
	{
		pm_trace0("cl_InitReaderFromFileByFriendlyName: FAILED");
	}

	pm_trace0("DoInitGlobalContext: END [%d]", cl_GetElapsedTimeHighPerformanceWin32() );
}

/*---------------------------------------------------------------------------*/

static void DoInitThread(void)
{
    e_Result status = CL_ERROR;

	//pm_xmemdbg_check(); // la memoire est-elle corrompue
	//pm_xmemdbg_dump_state();

    pm_trace0("DoInitThread: BEGIN");
    cl_GetElapsedTimeHighPerformanceWin32();

	status = csl_InitThreads();
	if ( CL_SUCCESS( status ) )
	{
		pm_trace0("DoInitThread: csl_InitThreads: SUCCESS");
	}
	else
	{
		pm_trace0("DoInitThread: csl_InitThreads: FAILED");
	}

	//pm_xmemdbg_dump_state();
    pm_trace0("DoInitThread: END [%d]", cl_GetElapsedTimeHighPerformanceWin32() );
}

/*---------------------------------------------------------------------------*/
static void DoAddReader( void )
{
	PM_TRACE0("Add Reader");

//	t_Reader theReader =
//	{
//		COM_READER_TYPE,			// Type of reader (LANTRONIX, others....)
//		STATE_DEFAULT,				// State of a reader
//		"MyReader 030E0D67", 		// Friendly name of a reader
//		(clu64)0, 					// clu64 handle for this reader
//		{CL_NULL}, 					// IP reader parameters - t_clIPReader_Params
//		{							// COM reader parameters - t_clCOMReader_Params
//			10,							// IP address of the reader in the network - clu8
//			256,						// Byte size for Transfer - e_COMBitDefs
//			1, 							// define stop bits on serial
//			CL_COM_BAUDRATE_115200,						// Baud rate for transfer of the reader
//		},
//		CL_NULL,					// Bluetooth parameters
//		{ 							// t_RdrSynchro - structure which holds tasks/threads for sending/receiving data as well as necessary signals for
//				CL_NULL,// Thread Id For Read Operations : auto filled when adding the reader to the list of readers
//				CL_NULL,// Thread Id For Write Operations : auto filled when adding the reader to the list of readers
//				CL_NULL,// Signal For Read Operations : auto filled when adding the reader to the list of readers
//				CL_NULL,// Signal For Write Operations : auto filled when adding the reader to the list of readers
//				CL_NULL, // Signal For Write completion signaling : auto filled when adding a reader to the list of readers
//		},
//		CL_NULL,		// Tuple list to be sent and attached to this reader
//		CL_NULL,		// Tuple list to be read and attached to this reader
//		LANTRONIX_READER_TYPE,// Ip reader use a Xport from LANTRONIX configured with CF/LF
//		{
//		CL_NULL,	// callback used on completion of reset of network stack
//				CL_NULL,// callback used when data was pushed out to the reader
//				NetwData2Read_cb_Reader1,// callback used when data is coming from reader
//		},
//		CL_NULL// Pointer on next reader : auto filled when adding the reader to the list of Readers
//	};

//	cl_readerAddToList( &theReader );
}

/*---------------------------------------------------------------------------*/

static void DoDisplayReadersList( void )
{
	e_Result  status = CL_ERROR;
	t_Reader *pReader = CL_NULL;
	t_Tuple  *pTuple = CL_NULL;

	pm_trace0("DoDisplayReadersList: BEGIN");

	status = cl_getReader_List( &pReader);
	if ( CL_SUCCESS( status ) )
	{
		while ( pReader)
		{
			// display something
			pm_trace0( "- reader friendly name: %s", pReader->aucLabel );
			pm_trace0( "- reader state: %s", pReader->eState == STATE_CONNECT ? "Connected" : "Not connected" );
			pm_trace0( "- reader handle: 0x%x", pReader->u64Handle );

			int idTuple = 1;
			pTuple = pReader->p_TplList2Send;
			while ( pTuple )
			{
				pm_trace0( "- tuple %d: Time: %s", idTuple, pTuple->cl8Time );
				pm_trace0( "  buf len: %d", idTuple, pTuple->ptBuf->ulLen );

				idTuple = idTuple + 1;
				pTuple = pTuple->pNext;
			}

			pReader = pReader->pNext;
		}
	}
	pm_trace0("DoDisplayReadersList: END");
}

/*---------------------------------------------------------------------------*\
 * If it is in state != STATE_CONNECT => Connect else => DISCONNECT
 */
static void DoChangeStateReader( void )
{
	e_Result    status = CL_ERROR;

	t_Reader tReaderFilter;
	t_Reader *pReaderFromList = CL_NULL;

	clu8 friendlyName[64] = "03 0E 0D 67";

	PM_TRACE0("DoChangeStateReader");
	cl_GetElapsedTimeHighPerformanceWin32();

	status = cl_InitReaderFromFileByFriendlyName(friendlyName, &tReaderFilter);
	if ( status == CL_PARAMS_ERR )
	{
		pm_trace0("Reader not foud in readerlist file !");
	}

    if ( CL_FAILED( status = cl_readerFindInList( &pReaderFromList, &tReaderFilter ) ) )
    {
    	pm_trace0("Reader in reader list:NOT FOUND");
        return;
    }

    if ( pReaderFromList == CL_NULL )
    {
    	pm_trace0("Pointer to Reader in reader list:NULL");
        return;
    }

    if ( pReaderFromList->eState != STATE_CONNECT )
	{
    	// change reader state
		if ( pReaderFromList->eState != STATE_OTA )
		{
			status = cl_ReaderSetState( pReaderFromList, STATE_CONNECT);
			if ( CL_FAILED( status ) )
			{
				pm_trace0("DoChangeStateReader: cl_ReaderSetState: STATE_CONNECT : ERROR");
			}
		}
	}
    else
    {
        if ((pReaderFromList->eState != STATE_DISCONNECT ) & ( pReaderFromList->eState != STATE_DISCOVER ))
        {
            // disconnect from lower layer
        	status = cl_ReaderSetState( pReaderFromList, STATE_DISCONNECT );
			if ( CL_FAILED( status ) )
			{
				pm_trace0("DoChangeStateReader: cl_ReaderSetState: STATE_DISCONNECT: ERROR");
			}
        }
    }

    pm_trace0("DoChangeStateReader:[%d ms]", cl_GetElapsedTimeHighPerformanceWin32());
}

/*---------------------------------------------------------------------------*\
 *
 * Je vais faire les choses autrement :
 *
 * J'ai un Reader avec une liste de Tuple à envoyer et une liste de Tuple
 * à recevoir ...
 *
 * Peut être qu'il faudrait tout préparer
 *
 * En fait non, j'ai utiisé p_TplList2Send et c'est tombé en marche
 *
 */
static void DoSendDataToReader( void )
{
	char 		friendlyName[64] = "03 0E 0D 67";
	bool 		readerOk = false;
	t_Reader 	theReader;
	t_Reader 	*pReaderFromList;
	t_clContext *pCtxt = CL_NULL;
    e_Result 	status = CL_ERROR;
    t_Buffer    *pBuffForNet = CL_NULL;
	t_Tuple     *pTuple2Send = CL_NULL;

	e_SERIAL_RetryProtocolDef eSynchroStatus = CL_SERIAL_PROT_W_END_DONE;

	PMLITE_BEGIN_PROC(DoSendDataToReader);

	status = cl_InitReaderFromFileByFriendlyName(friendlyName, &theReader);
	if ( status == CL_PARAMS_ERR )
	{
		pm_trace0("Reader not foud in readerlist file !");
	}

	// Is Reader already in the list of CSL readers list
	if ( CL_FAILED( cl_readerFindInList( &pReaderFromList, &theReader ) ) )
	{
		pm_trace0("Reader not foud in CLS reader list !");

		// Si le reader n'est pas dans la liste on ne pourra pas
		// lui envoyer de commandes, on return
		return;
	}

	if ( pReaderFromList )
	{
		if ( pReaderFromList->eState == STATE_CONNECT )
		{
			pm_trace0("Reader in state CONNECTED");
			readerOk = true;
		}
		else
		{
			pm_trace0("Reader not CONNECTED");
		}
	}

	if (readerOk == true )
	{
	        // get data to send
//	        QByteArray StringUTF8 = pCmdLineToClear->text().toUtf8();
//	        QByteArray Data2Send = QByteArray::fromHex( StringUTF8 );

		clu8 dataToSendAscii[6] = "010101";
		clu8 dataToSend[3];
		clu32 dataToSendLenght = 3;
		clu8    *pData = dataToSend;

		ConvertASCIToHex(dataToSendAscii, 6, dataToSend, &dataToSendLenght);

		if ( !pData ) return;

		// get context to have access to function pointers for memory/thread management on platform
		if ( CL_FAILED(status =  cl_GetContext( &pCtxt )) )
			return;

		// check input parameters
		if ( pCtxt->ptHalFuncs == CL_NULL ) return;

		if ( pCtxt->ptHalFuncs->fnAllocMem == CL_NULL ) return;

		// Allocate buffer for data to send
		csl_pmalloc( (clvoid **)&pBuffForNet, sizeof(t_Buffer) );
		csl_pmalloc( (clvoid **)&pBuffForNet->pData, dataToSendLenght);

		// allocate tuple which holds the data
		if ( CL_FAILED( csl_pmalloc( (clvoid **) &pTuple2Send, sizeof(t_Tuple)))) return;

		// save data in buffer
		memcpy( pBuffForNet->pData, pData, sizeof(dataToSend) );

		// initialize a tuple default flags with memory
		if ( CL_SUCCESS( cl_initTuple( pTuple2Send, pBuffForNet, &pBuffForNet->pData, sizeof(dataToSend) ) ) )
		{
			//
			// now send to the device Dev4Test connected an unknown reader
			//
			// cl_sendData( (t_Device*)CL_NULL, pReaderFromList, pTuple2Send, NON_BLOCKING, &clu32TsfNb );

			//
			// If p_TplList2Send is not empty, insert new Tuple at the end of p_TplList2Send
			//
			t_Tuple *tuple = pReaderFromList->p_TplList2Send;
			if ( tuple != CL_NULL )
			{
				while ( tuple->pNext != CL_NULL )
				{
					tuple = tuple->pNext;
				};
				tuple->pNext = pTuple2Send;
			}
			else
			{
				pReaderFromList->p_TplList2Send = pTuple2Send;
			}

			pReaderFromList->p_TplList2Send = pTuple2Send;

			pCtxt->ptHalFuncs->fnSemaphoreRelease( pReaderFromList->tSync.pSgl4Write );
		}

		DEBUG_PRINTF("DoSendDataToReader: Waiting for Write to be completed ...");

		// On n'est pas dans une thread POSIX donc on ne peut pas utiliser le semaphore
//		status = pCtxt->ptHalFuncs->fnSemaphoreWait( pReaderFromList->tSync.pSgl4WriteComplete, 50 );
//		if ( status == CL_TIMEOUT_ERR )
//		{
//			DEBUG_PRINTF("DoSendDataToReader: New Write can Beging ...");
//		}

		int not_exit = 1;
		pm_trace0("eSynchroStatus : %d", eSynchroStatus);

		while ( not_exit )
		{
			cl_ReaderGetSyncStatus( pReaderFromList, &eSynchroStatus );

			pm_trace0("eSynchroStatus : %d", eSynchroStatus);

			if ( eSynchroStatus == CL_SERIAL_PROT_DEFAULT )
			{

				not_exit = 0;
			}

			Sleep(10);
		}

		DEBUG_PRINTF("DoSendDataToReader: New Write can Beging ...");
	}
}

/*---------------------------------------------------------------------------*/

static void DoInit( void )
{
//	size_t max_memory_alloc = 1024*6;
//	00030355:0fb4:WriteThread: release memory for all tuples
//	00030355:0fb4:Memory block corrupted at address: [d66f40]
//	00030355:0fb4:Memory block corrupted at address: [d66f44]
//	cf. : Traces 1604 010-problem alloc mem.txt

//	size_t max_memory_alloc = 1024*100;

	pm_trace0("DoInit: BEGIN");

	DoInitGlobalContext();

//	DoChangeStateReader(); // Connect the Reader

//	c_printf("MaxAlloc set to: %d\n", max_memory_alloc);
//	pm_xmemdbg_set_max(max_memory_alloc);

	DoInitThread();

	DoChangeStateReader();

	pm_trace0("DoInit: END");
}

/*---------------------------------------------------------------------------*/

static void DoClose( void )
{
	e_Result status = CL_ERROR;

	if ( IsClosed == false )
	{
		pm_trace0("DoClose: BEGIN");

		status = csl_Close();

		pm_trace0("DoClose: status: %s", status == 0 ? "OK" : "NOT OK!???");
		pm_trace0("DoClose: END");
	}
	else
	{
		pm_trace0("Closed by user");
	}
}

/*---------------------------------------------------------------------------*/

static void DoClose_ByUser(void)
{
    e_Result status = CL_ERROR;

    pm_trace0("DoClose_ByUser: BEGIN");

    DoClose();

	IsClosed = true;
	pm_trace0("DoClose_ByUser: END");
}

/*--------------------------------------------------------------------------*/

PMMENU_BEGIN(CSLSendData, "CLS Send Data to Reader")
    PMMENU_ITEM_EX(1, "Init GlobalContext CSL for COM", DoInitGlobalContext)
    PMMENU_ITEM_EX(2, "Init Thread", 					DoInitThread)
    PMMENU_ITEM_EX(3, "Close CSL Manualy", 				DoClose_ByUser)
    PMMENU_ITEM_EX(4, "Display Reader's List", 			DoDisplayReadersList)
    PMMENU_ITEM_EX(5, "Connect/Disconnect Reader", 		DoChangeStateReader)
    PMMENU_ITEM_EX(6, "Send data to Reader", 			DoSendDataToReader)
PMMENU_END()

/*--------------------------------------------------------------------------*/

//PMMENU_DEFAULT_HANDLER(CLSInit)

/*---------------------------------------------------------------------------*/

PMMENU_HANDLER(CSLSendData)
{
    PMMENU_CHOICE_BEGIN()
		PMMENU_CASE_INIT(DoInit);
        PMMENU_CASE_CLOSE(DoClose);
	PMMENU_CHOICE_END()
}

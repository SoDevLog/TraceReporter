/*--------------------------------------------------------------------------*\
 * Copyright (c) 1998-2000 AbyreSoft. Written by Bruno Raby.
 *--------------------------------------------------------------------------*
 * TTrace.c - Differentes facons de faire des traces
\*--------------------------------------------------------------------------*/

#include "cMenu.h"
#include "pmInterface.h"
#include "pmEnv.h"
#include "pmTrace.h"

#include "cltypes.h"
#include "clstructs.h"
#include "clreaders.h"
#include "cl_readers.h"
#include "csl.h"

static bool IsClosed = false;

/*--------------------------------------------------------------------------*/

static void DoInitIPAndCOM_CSL(void)
{
    PM_TRACE0("CSL Init");
    e_Result status = CL_ERROR;

//      OLD Fashion initialize function pointers and callbacks
//		status = clInit( (clSys_HalFunctions_s *)&g_tHalFunc, (clSys_CallBackFunctions_s *)&g_tCallbacks, (t_MenuFileDef *)&g_tMenuFileDef);
//		if ( status != CL_OK )
//		{
//			return ( 0 );
//		}

    //g_tHalFunc.fnTrace = PM_TRACE0;
    g_tHalFunc.fnTrace = ( void *)pm_trace0;
    status = clInit( (e_StackSupport)( IP_STACK_SUPPORT | COM_STACK_SUPPORT ), (t_clSys_HalFunctions *)&g_tHalFunc, (t_clSys_CallBackFunctions *)&g_tCallbacks, (t_clSys_CallBackFunctions *)CL_NULL, &g_tCSLDefaultReader, &g_IPReaderDefaultHAL, CL_NULL, &g_COMReaderDefaultHAL, CL_NULL, CL_NULL, CL_NULL,(t_MenuFileDef *)&g_tMenuFileDef );

    // ...
}

/*---------------------------------------------------------------------------*/

static void DoInitCOM_CSL(void)
{
    e_Result status = CL_ERROR;

    PM_TRACE0("DoInit_CSL");

    //void (*pm_trace0)( char *aFormatString, ... );

    //g_tHalFunc.fnTrace = pm_trace0;
    g_tHalFunc.fnTrace = ( void *)pm_trace0; // ( void *) : avoid warning message

    status = clInit( (e_StackSupport)( COM_STACK_SUPPORT ), (t_clSys_HalFunctions *)&g_tHalFunc, (t_clSys_CallBackFunctions *)&g_tCallbacks, (t_clSys_CallBackFunctions *)CL_NULL, &g_tCSLDefaultReader, &g_IPReaderDefaultHAL, CL_NULL, &g_COMReaderDefaultHAL, CL_NULL, CL_NULL, CL_NULL,(t_MenuFileDef *)&g_tMenuFileDef );

    PM_TRACE0("CSL Init Done - status %d", status);
}


/*---------------------------------------------------------------------------*/
static void DoAddReader( void )
{
	PM_TRACE0("Add Reader");

//	t_Reader theReader =
//	{
//		COM_READER_TYPE,			// Type of reader (LANTRONIX, others....)
//		STATE_DEFAULT,				// State of a reader
//		"MyReader 030E0D67", 		// Friendly name of a reader
//		(clu64)0, 					// clu64 handle for this reader
//		{CL_NULL}, 					// IP reader parameters - t_clIPReader_Params
//		{							// COM reader parameters - t_clCOMReader_Params
//			10,							// IP address of the reader in the network - clu8
//			256,						// Byte size for Transfer - e_COMBitDefs
//			1, 							// define stop bits on serial
//			CL_COM_BAUDRATE_115200,						// Baud rate for transfer of the reader
//		},
//		CL_NULL,					// Bluetooth parameters
//		{ 							// t_RdrSynchro - structure which holds tasks/threads for sending/receiving data as well as necessary signals for
//				CL_NULL,// Thread Id For Read Operations : auto filled when adding the reader to the list of readers
//				CL_NULL,// Thread Id For Write Operations : auto filled when adding the reader to the list of readers
//				CL_NULL,// Signal For Read Operations : auto filled when adding the reader to the list of readers
//				CL_NULL,// Signal For Write Operations : auto filled when adding the reader to the list of readers
//				CL_NULL, // Signal For Write completion signaling : auto filled when adding a reader to the list of readers
//		},
//		CL_NULL,		// Tuple list to be sent and attached to this reader
//		CL_NULL,		// Tuple list to be read and attached to this reader
//		LANTRONIX_READER_TYPE,// Ip reader use a Xport from LANTRONIX configured with CF/LF
//		{
//		CL_NULL,	// callback used on completion of reset of network stack
//				CL_NULL,// callback used when data was pushed out to the reader
//				NetwData2Read_cb_Reader1,// callback used when data is coming from reader
//		},
//		CL_NULL// Pointer on next reader : auto filled when adding the reader to the list of Readers
//	};

//	cl_readerAddToList( &theReader );
}

/*---------------------------------------------------------------------------*/

static void DoInitReadersFromFile( void )
{
	PM_TRACE0("DoInitReadersFromFile");

	cl_InitReadersFromFile();
}

/*---------------------------------------------------------------------------*\
 * If it is in state != STATE_CONNECT => Connect else => DISCONNECT
 */
static void DoChangeStateReader( void )
{
	e_Result    status = CL_ERROR;

	t_Reader tReaderFilter;
	t_Reader *pReaderFromList = CL_NULL;

	clu8 friendlyName[64] = "03 0E 0D 67";
	clu8 portName[64] = "COM3";

	PM_TRACE0("DoConnectReader");

	if ( CL_FAILED( cl_ReaderFillWithDefaultFields( &tReaderFilter, COM_READER_TYPE ) ) )
	{
		pm_trace0("ReaderFillWithDefaultFields:FAILED");
		return;
	}

	// Friendly name
	memset( tReaderFilter.aucLabel, 0, sizeof( tReaderFilter.aucLabel ) );
	memcpy( tReaderFilter.aucLabel, friendlyName, sizeof(friendlyName) );

	// COM parameters
	// Baud Rate
	tReaderFilter.tCOMParams.eBaudRate = CL_COM_BAUDRATE_115200;
	// others ...
    tReaderFilter.tCOMParams.eByteSize = CL_COM_BYTESIZE_8BITS;
    tReaderFilter.tCOMParams.eParityBits = CL_COM_PARITYBIT_NONE;
    tReaderFilter.tCOMParams.eStopBits = CL_COM_STOPBITS_10BIT;
	// port name COM3
    memset( tReaderFilter.tCOMParams.aucPortName, 0, sizeof( tReaderFilter.tCOMParams.aucPortName ) );
    memcpy( (clvoid*)tReaderFilter.tCOMParams.aucPortName, (clvoid*)portName, strlen( (const cl8*)portName ) );

    if ( CL_FAILED( status = cl_readerFindInList( &pReaderFromList, &tReaderFilter ) ) )
    {
    	pm_trace0("Reader in reader list:NOT FOUND");
        return;
    }

    if ( pReaderFromList == CL_NULL )
    {
    	pm_trace0("Pointer to Reader in reader list:NULL");
        return;
    }

    if ( pReaderFromList->eState != STATE_CONNECT )
	{
    	// change reader state
		if ( pReaderFromList->eState != STATE_OTA )
			cl_ReaderSetState( pReaderFromList, STATE_CONNECT);
	}
    else
    {
        if ((pReaderFromList->eState != STATE_DISCONNECT ) & ( pReaderFromList->eState != STATE_DISCOVER ))
        {
            // disconnect from lower layer
            cl_ReaderSetState( pReaderFromList, STATE_DISCONNECT );
        }
    }
}

/*---------------------------------------------------------------------------*\
 * If it is in state != STATE_CONNECT => Connect else => DISCONNECT
 */
static void DoSendDataToReader( void )
{
	clu8 		friendlyName[64] = "03 0E 0D 67";
	bool 		readerOk = false;
	t_Reader 	theReader;
	t_Reader 	*pReaderFromList;
	t_clContext *pCtxt = CL_NULL;
    e_Result 	status = CL_ERROR;

	clu8        *pBuffForNet = CL_NULL;
	t_Tuple     *pTuple2Send = CL_NULL;
	clu32       clu32TsfNb  = 0;

	status = cl_InitReaderFromFile(friendlyName, &theReader);
	if ( status == CL_PARAMS_ERR )
	{
		pm_trace0("Reader not foud in readerlist file !");
	}

	// Is Reader already in the list of CSL readers list
	if ( CL_FAILED( cl_readerFindInList( &pReaderFromList, &theReader ) ) )
	{
		pm_trace0("Reader not foud in CLS reader list !");

		// Si le reader n'est pas dans la liste on ne pourra pas
		// lui envoyer de commandes, on return
		return;
	}

	if ( pReaderFromList )
	{
		if ( pReaderFromList->eState == STATE_CONNECT )
		{
			pm_trace0("Reader in state CONNECTED");
			readerOk = true;
		}
		else
		{
			pm_trace0("Reader not CONNECTED");
			//return; // j'envoie au reader meme deceonnecté
		}
	}

	if (readerOk == true )
	{
	        // get data to send
//	        QByteArray StringUTF8 = pCmdLineToClear->text().toUtf8();
//	        QByteArray Data2Send = QByteArray::fromHex( StringUTF8 );

		clu8 dataToSendAscii[6] = "010101";
		clu8 dataToSend[3];
		clu32 dataToSendLenght = 3;
		ConvertASCIToHex(dataToSendAscii, 6, dataToSend, &dataToSendLenght);
		clu8    *pData = dataToSend;

		if ( !pData ) return;

		// get context to have access to function pointers for memory/thread management on platform
		if ( CL_FAILED(status =  cl_GetContext( &pCtxt )) )
			return;

		// check input parameters
		if ( pCtxt->ptHalFuncs == CL_NULL ) return;

		if ( pCtxt->ptHalFuncs->fnAllocMem == CL_NULL ) return;

		// allocate buffer for data to send
		if ( CL_FAILED( pCtxt->ptHalFuncs->fnAllocMem( (clvoid **) &pBuffForNet, sizeof(dataToSend)))) return;

		// allocate tuple which holds the data
		if ( CL_FAILED( pCtxt->ptHalFuncs->fnAllocMem( (clvoid **) &pTuple2Send, sizeof(t_Tuple)))) return;

		// save data in buffer
		memcpy( pBuffForNet, pData, sizeof(dataToSend) );

		// initialize a tuple default flags with memory
		if ( CL_SUCCESS( cl_initTuple( pTuple2Send, CL_NULL, &pBuffForNet, sizeof(dataToSend) ) ) )
		{
			// now send to the device Dev4Test connected an unknown reader
			//( t_Device *pDevice, t_Reader *pReader, t_Tuple *pTuple, e_CallType TsfType, clu32 *pTsfNb )
			cl_sendData( (t_Device*)CL_NULL, pReaderFromList, pTuple2Send, NON_BLOCKING, &clu32TsfNb );
		}

//		/* clean up the interface*/
//		pCmdLineToClear->setText(QString(""));
	}
}

/*---------------------------------------------------------------------------*/

static void DoClose_CSL(void)
{
    e_Result status = CL_ERROR;

    PM_TRACE0("DoClose_CSL");

    //g_tCtxt.ptHalFuncs->fnDestroyThread
    //g_tHalFunc.fnDestroyThread

//    if ( pCtxt->g_RegReader.tThreadId != CL_NULL )
//    {
//		pCtxt->ptHalFuncs->fnDestroyThread( pCtxt->g_RegReader.tThreadId );
//	    pCtxt->g_RegReader.tThreadId = CL_NULL;
//	  }

    // READER
    // destroy the thread for reader registration
    if (g_tCtxt.g_RegReader.tThreadId != CL_NULL)
    {
    	status = g_tCtxt.ptHalFuncs->fnDestroyThread(g_tCtxt.g_RegReader.tThreadId);
    	PM_TRACE0("Destroy Reader Thread:%d",g_tCtxt.g_RegReader.tThreadId);
    	// g_tCtxt.g_RegReader.tThreadId = CL_NULL;
    }

	// CRYPTO
    // destroy the thread for crypto access
	if ( g_tCtxt.tCrypto.tThreadId != CL_NULL )
	{
		status = g_tCtxt.ptHalFuncs->fnDestroyThread( g_tCtxt.tCrypto.tThreadId );
		PM_TRACE0("Destroy Crypto Thread:%d",g_tCtxt.tCrypto.tThreadId);
		//g_tCtxt.tCrypto.tThreadId = CL_NULL;
	}

	// SIGNAL CRYPTO
	// destroy the signal for crypto
	if ( g_tCtxt.tCrypto.pSgl != CL_NULL)
	{
		status = g_tCtxt.ptHalFuncs->fnSemaphoreDestroy( g_tCtxt.tCrypto.pSgl );
		//g_tCtxt.tCrypto.pSgl = CL_NULL;
	}

	// SIGNAL READER
	// destroy the signal for reader registration
	if ( g_tCtxt.g_RegReader.pSgl != CL_NULL)
	{
		status = g_tCtxt.ptHalFuncs->fnSemaphoreDestroy( g_tCtxt.g_RegReader.pSgl );
		//g_tCtxt.g_RegReader.pSgl = CL_NULL;
	}

	IsClosed = true;
    PM_TRACE0("CSL Close Done - status %d", status);
}

/*---------------------------------------------------------------------------*/

static void DoInit( void )
{
	PM_TRACE0("Menu CSL Init");

	DoInitCOM_CSL();
	c_printf("DoInit OK\n");

	DoInitReadersFromFile();
	c_printf("DoInitReadersFromFile OK\n");

	// ne pas faire automatiquement pour voir les échanges
//	DoChangeStateReader(); // Connect
//	c_printf("DoChangeStateReader OK\n");
}

/*---------------------------------------------------------------------------*/

static void DoClose( void )
{
	PM_TRACE0("Menu CSL Close");
	c_printf("DoClose");
	if ( !IsClosed )
	{
		c_printf("Closing CSL");
		DoClose_CSL();
	}
}

/*--------------------------------------------------------------------------*/

PMMENU_BEGIN(CLSInit, "CLS Init")
    PMMENU_ITEM_EX(1, "Init CSL for IP & COM", DoInitIPAndCOM_CSL)
    PMMENU_ITEM_EX(2, "Init CSL for COM", DoInitCOM_CSL)
//    PMMENU_ITEM_EX(3, "- not implemented - Add a Reader to List", DoAddReader)
    PMMENU_ITEM_EX(4, "Init Readers From File", DoInitReadersFromFile)
    PMMENU_ITEM_EX(5, "Connect/Disconnect Reader", DoChangeStateReader)
    PMMENU_ITEM_EX(6, "Send data to Reader", DoSendDataToReader)
    PMMENU_ITEM_EX(7, "Close CSL", DoClose_CSL)
PMMENU_END()

/*--------------------------------------------------------------------------*/

//PMMENU_DEFAULT_HANDLER(CLSInit)

/*---------------------------------------------------------------------------*/

PMMENU_HANDLER(CLSInit)
{
    PMMENU_CHOICE_BEGIN()
		PMMENU_CASE_INIT(DoInit);
        PMMENU_CASE_CLOSE(DoClose);
	PMMENU_CHOICE_END()
}
